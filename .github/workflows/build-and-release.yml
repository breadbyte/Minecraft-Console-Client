name: Build MCC and Documents

on:
  push:
    branches:
      - master
  workflow_dispatch:
  
env:
  PROJECT: "MinecraftClient"
  target-version: "net7.0"
  compile-flags: "--self-contained=true -c Release -p:UseAppHost=true -p:IncludeNativeLibrariesForSelfExtract=true -p:EnableCompressionInSingleFile=true -p:DebugType=None"

jobs:
  determine-build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    if: ${{ !contains(github.event.head_commit.message, 'skip ci') }}
    steps:
      - name: dummy action
        run: |
          echo ENVTEST='dummy action' >> $GITHUB_ENV
    
  fetch-translations:
    strategy:
      fail-fast: true
    runs-on: ubuntu-latest
    needs: determine-build
    # Only works in MCCTeam repository, since it needs crowdin secrets.
    if: ${{ github.repository == 'MCCTeam/Minecraft-Console-Client' }}
    timeout-minutes: 15
  
    steps:
    - name: Download translations from crowdin
      uses: crowdin/github-action@v1.6.0
      with:
        upload_sources: true
        upload_translations: false
        download_translations: true

        localization_branch_name: l10n_master
        create_pull_request: false 
        push_translations: false

        base_path: ${{ github.workspace }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
        CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_TOKEN }}
    
    - name: Cache
      uses: actions/cache@v3.2.4
      id: cache
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: ${{ github.workspace }}/*
        # An explicit key for restoring and saving the cache
        key: 'translation-${{ env.build-version-info }}'
      
  fetch-repo:
    runs-on: ubuntu-latest
    needs: determine-build
    timeout-minutes: 15
  
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: 'true'
        
    - name: Cache
      uses: actions/cache@v3.2.4
      id: cache
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: ${{ github.workspace }}/*
        # An explicit key for restoring and saving the cache
        key: '${{ github.sha }}'
    
  build:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [determine-build, fetch-translations, fetch-repo]
    timeout-minutes: 15
    strategy:
      matrix:
        target: [win-x86]

    steps:
    - name: Restore Repository
      uses: actions/cache/restore@v3
      with:
        path: ${{ github.workspace }}/*
        key: ${{ github.sha }}
        
    - name: Restore Translations (if available)
      uses: actions/cache/restore@v3
      with:
        path: ${{ github.workspace }}/*
        key: "translation-${{ env.build-version-info }}"
        restore-keys: "translation-${{ env.ENVTEST }}"
        
    - name: Always Fail
      # You may pin to the exact commit or the version.
      # uses: cutenode/action-always-fail@a4c550da5463ba7eb224caf9cd2e02d4c82c1eb0
      uses: cutenode/action-always-fail@v1.0.1
    
    - name: Get Version DateTime
      id: date-version
      uses: nanzm/get-time-action@v1.1
      with:
        timeZone: 0
        format: 'YYYY-MM-DD'
    
    - name: Setup Environment Variables (early)
      run: |
        echo project-path=${{ github.workspace }}/${{ env.PROJECT }} >> $GITHUB_ENV
        echo file-ext=${{ (startsWith(matrix.target, 'win') && '.exe') || ' ' }} >> $GITHUB_ENV
        
    - name: Setup Environment Variables
      run: |
        echo target-out-path=${{ env.project-path }}/bin/Release/${{ env.target-version }}/${{ matrix.target }}/publish/ >> $GITHUB_ENV
        echo assembly-info=${{ env.project-path }}/Properties/AssemblyInfo.cs >> $GITHUB_ENV
        echo build-version-info=${{ steps.date-version.outputs.time }}-${{ github.run_number }} >> $GITHUB_ENV
        echo commit=$(echo ${{ github.sha }} | cut -c 1-7) >> $GITHUB_ENV
        
    - name: Setup Environment Variables (late)
      run: |
        echo built-executable-path=${{ env.target-out-path }}${{ env.PROJECT }}${{ env.file-ext }} >> $GITHUB_ENV

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v2.1.0

    - name: VersionInfo
      run: |
        echo '' >> ${{ env.assembly-info }}
        echo "[assembly: AssemblyConfiguration(\"GitHub build ${{ github.run_number }}, built on ${{ steps.date-version.outputs.time }} from commit ${{ env.commit }}\")]" >> ${{ env.assembly-info }}

    - name: Build Target
      run: dotnet publish ${{ env.project-path }}.sln -f ${{ env.target-version }} -r ${{ matrix.target }} ${{ env.compile-flags }}
      
    - name: Get Release DateTime
      id: date-release
      uses: nanzm/get-time-action@v1.1
      with:
        timeZone: 0
        format: 'YYYYMMDD'

    - name: Target Publish Executable
      uses: tix-factory/release-manager@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        mode: uploadReleaseAsset
        filePath: ${{ env.built-executable-path }}
        assetName: ${{ env.PROJECT }}-${{ env.commit }}-${{ matrix.target }}${{ (startsWith(matrix.target, 'win') && '.exe') || ' ' }}
        tag: ${{ format('{0}-{1}', steps.date-release.outputs.time, github.run_number) }}
